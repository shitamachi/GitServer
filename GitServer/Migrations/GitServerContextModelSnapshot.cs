// <auto-generated />
using System;
using GitServer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GitServer.Migrations
{
    [DbContext(typeof(GitServerContext))]
    partial class GitServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GitServer.ApplicationCore.Models.AuthorizationLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssueIp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastIp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("AuthorizationLogs");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.Comment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.Issue", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPull")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("RepositoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.IssueComment", b =>
                {
                    b.Property<long>("IssueID")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentID")
                        .HasColumnType("bigint");

                    b.HasKey("IssueID", "CommentID");

                    b.HasIndex("CommentID");

                    b.ToTable("IssueComments");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.Label", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("IssueID")
                        .HasColumnType("bigint");

                    b.Property<long>("RepositoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("IssueID");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.Repository", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefaultBranch")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsMirror")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NumIssues")
                        .HasColumnType("int");

                    b.Property<int>("NumOpenIssues")
                        .HasColumnType("int");

                    b.Property<int>("NumOpenPulls")
                        .HasColumnType("int");

                    b.Property<int>("NumPulls")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.SshKey", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ImportData")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("KeyType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastUse")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PublicKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("SshKeys");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.Team", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.TeamRepositoryRole", b =>
                {
                    b.Property<long>("TeamID")
                        .HasColumnType("bigint");

                    b.Property<long>("RepositoryID")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowWrite")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("TeamID", "RepositoryID");

                    b.HasIndex("RepositoryID");

                    b.ToTable("TeamRepositoryRoles");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsSystemAdministrator")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WebSite")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.UserTeamRole", b =>
                {
                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserID", "TeamID");

                    b.HasIndex("TeamID");

                    b.ToTable("UserTeamRoles");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.AuthorizationLog", b =>
                {
                    b.HasOne("GitServer.ApplicationCore.Models.User", "User")
                        .WithMany("AuthorizationLogs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.IssueComment", b =>
                {
                    b.HasOne("GitServer.ApplicationCore.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GitServer.ApplicationCore.Models.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.Label", b =>
                {
                    b.HasOne("GitServer.ApplicationCore.Models.Issue", null)
                        .WithMany("Labels")
                        .HasForeignKey("IssueID");
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.SshKey", b =>
                {
                    b.HasOne("GitServer.ApplicationCore.Models.User", "User")
                        .WithMany("SshKeys")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.TeamRepositoryRole", b =>
                {
                    b.HasOne("GitServer.ApplicationCore.Models.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GitServer.ApplicationCore.Models.Team", "Team")
                        .WithMany("TeamRepositoryRoles")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GitServer.ApplicationCore.Models.UserTeamRole", b =>
                {
                    b.HasOne("GitServer.ApplicationCore.Models.Team", "Team")
                        .WithMany("UserTeamRoles")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GitServer.ApplicationCore.Models.User", "User")
                        .WithMany("UserTeamRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
